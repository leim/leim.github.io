<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MengLei Site</title>
  <subtitle>A place to memorize something.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://menglei.tk/"/>
  <updated>2016-10-26T09:12:26.995Z</updated>
  <id>https://menglei.tk/</id>
  
  <author>
    <name>Meng Lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo搭建备忘</title>
    <link href="https://menglei.tk/2016/10/24/hexo/"/>
    <id>https://menglei.tk/2016/10/24/hexo/</id>
    <published>2016-10-24T07:04:44.000Z</published>
    <updated>2016-10-26T09:12:26.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h1><p>Hexo是一款轻量级的HTML静态博客生成器，由Node.js编写，支持Markdown撰写，运行速度快，可以一键部署到Github Pages等托管网站，同时支持插件，可以通过编写插件支持更加丰富的功能。</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>Hexo基于Node.js编写，安装Hexo之前，需要首先确保正确安装了Node.js、npm和Git（参见<a href="https://nodejs.org/" target="_blank" rel="external">Node.js官网</a>、<a href="https://git-scm.com/" target="_blank" rel="external">Git官网</a>），只要运行以下命令即可将Hexo安装到电脑中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>安装Hexo成功后，即可创建Hexo工程目录，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init demo</div><div class="line">cd demo</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>创建成功后，所包含的目录结构以及功能说明如下：</p>
<ul>
<li>_config.yml：网站配置信息。</li>
<li>packages.json：node_modules模块配置信息。</li>
<li>scaffolds：模板配置文件夹。</li>
<li>sources：用户资源，markdown和html会被render并保存至public文件夹供访问，其余文件被直接copy。其中_post文件夹中保存已发布的文章，_draft文件夹中保存草稿。</li>
<li>themes：主题文件夹。</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>网站的所有配置信息保存在_config.yml文件中，可以视情况进行修改。</p>
<p>具体的配置说明可参见：<a href="https://hexo.io/zh-cn/docs/configuration.html。" target="_blank" rel="external">https://hexo.io/zh-cn/docs/configuration.html。</a></p>
<h1 id="申请Github-Pages空间"><a href="#申请Github-Pages空间" class="headerlink" title="申请Github Pages空间"></a>申请Github Pages空间</h1><p>在github上面创建一个和repository，名称为 <your user="" name="">.github.io，进入settings，选择options，下面有Github Pages的设置区域，可以选择默认的分支，并且能够自定义域名，这里我们将默认分支设置为master，同时添加自定义域名 <code>menglei.tk</code> ，添加自定义域名之后，下方 enforce https选项变得不可选，因为github无法对自定义域名提供https证书，此处我们可以通过其他方式来对https进行支持。这里填写完自定义域名之后，需要到域名的控制台，为其添加A记录，分别对应IP地址为 192.30.252.153 和 192.30.252.154 。</your></p>
<p>这样，所有访问自定义域名都会直接请求到该repo的master分支内根目录下的index.html文件。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>Hexo可以支持git、heroku、Rsync、OpenShift、FTPSync等多种部署方式，如果这里没有提供您所需要的部署方式，可以直接将生成的public文件夹中所有的文件复制到所需要的server root文件夹。</p>
<p>我们这里采用的是git部署方式，首先需要添加 <code>hexo-deployer-git</code> ，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后在根目录下的_config.yml文件后面，增加以下配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">- type: git</div><div class="line">  repo: &lt;repo url&gt;   //远程repo地址</div><div class="line">  branch: &lt;branch name&gt;  //通过git提交到远程repo的分支</div><div class="line">  message: &lt;push message&gt;  //提交信息</div><div class="line">- type: git</div><div class="line">  repo: &lt;repo url2&gt;  // 可以支持同时部署到多个远程repo</div></pre></td></tr></table></figure>
<p>这里可以同时支持将其部署到多个repo中，也可以同时支持多种不同的repo类型。</p>
<h1 id="Sitemap："><a href="#Sitemap：" class="headerlink" title="Sitemap："></a>Sitemap：</h1><p>为了让搜索引擎更好的抓取网站内容，我们这里可以生成sitemap，首先需要执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-baidu-sitemap --save   //生成百度sitemap</div><div class="line">npm install hexo-generator-sitemap --save    //生成google sitemap</div></pre></td></tr></table></figure>
<p>然后在根目录_config.yml文件末尾，添加以下配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure>
<p>这样，就可以通过 <a href="http://url/sitemap.xml" target="_blank" rel="external">http://url/sitemap.xml</a> 和 <a href="http://url/baidusitemap.xml" target="_blank" rel="external">http://url/baidusitemap.xml</a> 访问到网站的sitemap了，只要将以上地址提交到google和百度，即可加速搜索引擎抓取，优化网站的收录。</p>
<h1 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h1><p>为了给用户提供订阅，可以生成Feed文件，首先要执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>然后在根目录_config.yml文件中，添加以下配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 50</div><div class="line">  hub:</div></pre></td></tr></table></figure>
<p>这样，就可以通过 <a href="http://url/atom.xml" target="_blank" rel="external">http://url/atom.xml</a> 访问到网站的订阅Feed了。</p>
<h1 id="HTTPS配置"><a href="#HTTPS配置" class="headerlink" title="HTTPS配置"></a>HTTPS配置</h1><p>如果申请了Github Pages空间只好没有设置自定义域名，那么可以直接使用<your user="" name="">.github.io访问网站，并且可以启用enforce https选项强制所有用户使用https访问。但是设置自定义域名之后，必须采用一些其他方式，这里我们采用的是cloudflare免费CDN功能。</your></p>
<p>CloudFlare提供用户免费的CDN加速功能，并且支持HTTPS加速，所以，我们先申请一个cloudflare的账号，添加域名，然后到原域名供应商处将其dns服务器设置为cloudflare的dns服务器：kai.ns.cloudflare.com 和     naomi.ns.cloudflare.com 。然后将原来的dns record全都转移过来，同时，对于指向github pages的域名对应的两条A记录，启用CDN功能，这样，所有访问您github pages网站的请求，都会被cloudflare中转加速，免费的账户支持添加三条page rules，我们添加一条即可，配置域名，选择always use https，同时启用该条规则，这样，所有访问http的请求，都会被强制转向https，此处的https证书是cloudflare免费提供的，用户不必担心使用有效期，也不必承担费用。</p>
<p>同时，cloudflare还有很多高级功能可以免费使用，比如访问统计，防火墙，数据分析等，大家可以慢慢摸索。</p>
<h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>至此，所有的配置工作都已经完成，可以愉快的进行写作了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于Hexo&quot;&gt;&lt;a href=&quot;#关于Hexo&quot; class=&quot;headerlink&quot; title=&quot;关于Hexo&quot;&gt;&lt;/a&gt;关于Hexo&lt;/h1&gt;&lt;p&gt;Hexo是一款轻量级的HTML静态博客生成器，由Node.js编写，支持Markdown撰写，运行速度快，可
    
    </summary>
    
      <category term="memo" scheme="https://menglei.tk/categories/memo/"/>
    
    
      <category term="备忘" scheme="https://menglei.tk/tags/%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装配置备忘</title>
    <link href="https://menglei.tk/2016/10/21/nginx/"/>
    <id>https://menglei.tk/2016/10/21/nginx/</id>
    <published>2016-10-21T08:20:02.000Z</published>
    <updated>2016-10-24T08:59:49.573Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://nginx.org/" target="_blank" rel="external">Nginx</a>是一个俄罗斯开发的高性能HTTP服务器和反向代理服务器，功能丰富、性能强悍、运行稳定、应用广泛，完全使用C语言编写，可运行于各种Unix Like OS，并有Windows移植版本(不推荐用于生产环境)。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在Ubuntu中，可以直接使用<code>sudo apt-get install nginx</code> 命令安装nginx，安装之后，默认的配置文件保存在 <code>/etc/nginx</code> 文件夹内，默认提供http服务的目录位置在 <code>/usr/local/nginx/html</code>。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>nginx的主配置文件是：nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">user www-data;  #用户与用户组</div><div class="line">worker_processes 4;  #对外提供服务的worker进程数量，取值取决因素包括（但不限于）CPU核的数量、存储数据的硬盘数量及负载模式。默认可设置为CPU内核数或者可设置为“auto”。</div><div class="line">worker_rlimit_nofile 30000;   #worker进程最大打开文件数量限制</div><div class="line">pid /var/run/nginx.pid;     #pid文件保存位置</div><div class="line"></div><div class="line">events &#123;</div><div class="line">        worker_connections 10000;   #单个worker可以最大打开的连接数</div><div class="line">        # multi_accept on;    #收到一个新连接通知后是否接受尽可能多的连接</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line"></div><div class="line">        ##</div><div class="line">        # Basic Settings</div><div class="line">        ##</div><div class="line"></div><div class="line">        sendfile on;     #sendfile特性，提高文件访问的效率</div><div class="line">        tcp_nopush on;   #在一个tcp数据包里发送所有的头文件</div><div class="line">        tcp_nodelay on;  #不要缓存数据，立即发送</div><div class="line">        keepalive_timeout 65;    #客户端keep-alive连接的超时时间</div><div class="line">        types_hash_max_size 2048;</div><div class="line">        # server_tokens off;   #是否关闭错误页面中的nginx版本显示</div><div class="line"></div><div class="line">        # server_names_hash_bucket_size 64;</div><div class="line">        # server_name_in_redirect off;</div><div class="line"></div><div class="line">        include /etc/nginx/mime.types;   #特定后缀使用mime types的配置</div><div class="line">        default_type application/octet-stream;   #默认文件mime types</div><div class="line">        client_max_body_size 200m;      #上传文件最大体积</div><div class="line"></div><div class="line">        ##</div><div class="line">        # Logging Settings</div><div class="line">        ##</div><div class="line">        </div><div class="line">        access_log off;   #访问日志记录文件路径</div><div class="line">        error_log /var/log/nginx/error.log;    #错误日志记录文件</div><div class="line"></div><div class="line">        ##</div><div class="line">        # Gzip Settings</div><div class="line">        ##</div><div class="line"></div><div class="line">        gzip on;    #是否启用gzip压缩(可减少流量，增大服务器负载)</div><div class="line">        gzip_disable &quot;msie6&quot;;    #指定客户端禁用gzip</div><div class="line"></div><div class="line">        gzip_vary on;</div><div class="line">        gzip_proxied any;  #允许或者禁止压缩基于请求和响应的响应流。设置为any，意味着将会压缩所有的请求。</div><div class="line">        gzip_comp_level 6;  #压缩等级</div><div class="line">        # gzip_buffers 16 8k;</div><div class="line">        # gzip_http_version 1.1;</div><div class="line">        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; #设置需要压缩的数据格式</div><div class="line"></div><div class="line">        server&#123;  #服务器配置</div><div class="line">            listen  80; #端口</div><div class="line">            server_name  example.com;  #域名  </div><div class="line">            location / &#123;</div><div class="line">                root /usr/local/nginx/html;  #根目录</div><div class="line">                index index.html index.htm index.php;  #默认主页文件</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        ##</div><div class="line">        # Virtual Host Configs</div><div class="line">        ##</div><div class="line"></div><div class="line">        include /etc/nginx/conf.d/*.conf;    #配置</div><div class="line">        include /etc/nginx/sites-enabled/*;  #virutal host配置</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="virutal-host-配置"><a href="#virutal-host-配置" class="headerlink" title="virutal host 配置"></a>virutal host 配置</h1><p>nginx作为反向代理服务器，可以根据域名不同将用户的请求分发给不同的后端服务器，配置文件放置在site-available目录中，如果要启用某一个特定的配置文件，需要在site-enabled目录中建立一个对应的软连接。</p>
<p>我们想要配置一个<code>api.example.com</code>的虚拟服务器，将特定/api路径下的所有请求转发到后端的api服务器，其他请求直接访问对应的静态文件目录，同时支持HTTP和HTTPS访问，配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name api.example.com;  #域名，只有访问这个域名的请求才会被转发到这里</div><div class="line">    listen 80;  #监听端口</div><div class="line">    listen 443 ssl;   #HTTPS监听端口</div><div class="line">    ssl on;   #是否启用HTTPS</div><div class="line">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;   #HTTPS证书公钥地址，此处为Let&apos;s Encrypt申请的证书</div><div class="line">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; #HTTPS证书私钥地址，此处为Let&apos;s Encrypt申请的证书</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #HTTPS协议版本</div><div class="line">    ssl_prefer_server_ciphers on;   #服务器加密优先于客户端加密</div><div class="line">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;   #加密算法</div><div class="line">    location ^~ /api/ &#123;  #所有匹配到/api路径下的访问，全部转发</div><div class="line">        proxy_pass http://127.0.0.1:8051/rest/;</div><div class="line">        proxy_set_header Host $http_host;  #转发的请求，HOST取值为客户端访问的host值</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  #增加x-Forwarded-for</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;  #增加x-real-ip，取值为访问用户的真实IP，供后端获取客户IP使用</div><div class="line">    &#125;</div><div class="line">    location = /upload &#123;  #只有访问路径等于 /upload 的请求，才会转发到这里</div><div class="line">        proxy_pass http://127.0.0.1:8052/upload/;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        client_max_body_size 200m;  #设置最大上传文件体积，单位可以是k、m、g</div><div class="line">    &#125;</div><div class="line">    location ~ /.well-known &#123;   #letsencrypt申请证书验证域名使用的配置目录</div><div class="line">        root /usr/share/nginx/.well-known;</div><div class="line">        index index.html;</div><div class="line">    &#125;</div><div class="line">    location / &#123;  #所有不匹配上面各种条件的请求，都转发到这里</div><div class="line">        root /var/webroot;</div><div class="line">        index index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将以上配置保存为 /etc/nginx/sites-available 目录中的 api.example 文件，然后进入site-enabled目录，执行 <code>ln -s ../sites-available/api.example api.example</code> 在sites-enabled中建立其对应的软连接，然后执行 <code>service nginx reload</code> 重新加载nginx的配置，即可生效。</p>
<h1 id="nginx配置强制跳转HTTPS"><a href="#nginx配置强制跳转HTTPS" class="headerlink" title="nginx配置强制跳转HTTPS"></a>nginx配置强制跳转HTTPS</h1><p>很多网站都要求所有HTTP的访问都强制跳转到HTTPS，其配置方法有很多种，可以按照以下配置思路：</p>
<p>我们有一个仅支持HTTPS访问的配置好的virtual host：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name www.example.com;</div><div class="line">    listen 443 ssl;</div><div class="line">    ssl on;</div><div class="line">    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</div><div class="line">    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root /var/webroot;</div><div class="line">        index index.htm index.html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建一个配置文件www.redirect：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name www.example.com;</div><div class="line">    listen 80;</div><div class="line">    location ~ /.well-known &#123; #letsencrypt申请证书验证域名使用的配置目录</div><div class="line">        root /usr/share/nginx/.well-known;</div><div class="line">        index index.html;</div><div class="line">    &#125;</div><div class="line">    location / &#123; #默认请求</div><div class="line">        root /noexists;  #一个不存在的目录</div><div class="line">        index index.html;  </div><div class="line">    &#125;</div><div class="line">    error_page 404 https://www.example.com/;  #访问文件不存在时，跳转的链接</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在sites-enabled 目录中为以上配置文件设置一个软链接，然后reload nginx即可。</p>
<p>其思路主要是利用了nginx的404页面，我们为http server配置了一个不存在的路径，这样在访问http服务器的时候，其index.html文件是不存在的，这样nginx就会给用户返回特定的404 Not Found 页面，我们将对应的HTTPS链接指定为其对应的404页面，这样在访问http server的时候，就会被自动redirect到相应的HTTPS页面了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://nginx.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx&lt;/a&gt;是一个俄罗斯开发的高性能HTTP服务器和反向代理服务器，功能丰富、性能强悍、运行稳定、应用广泛，完全使用C语言编写，可运行于各种Unix 
    
    </summary>
    
      <category term="server" scheme="https://menglei.tk/categories/server/"/>
    
    
      <category term="HTTPS" scheme="https://menglei.tk/tags/HTTPS/"/>
    
      <category term="Nginx" scheme="https://menglei.tk/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Encrypt 配置过程记录</title>
    <link href="https://menglei.tk/2016/10/18/certbot/"/>
    <id>https://menglei.tk/2016/10/18/certbot/</id>
    <published>2016-10-18T08:25:00.000Z</published>
    <updated>2016-10-24T08:59:49.521Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s Encrypt 是一个免费的SSL证书机构，可以通过Certbot工具进行申请。</p>
<p>Let’s Encrypt 网站： <a href="https://letsencrypt.org/" target="_blank" rel="external">https://letsencrypt.org/</a></p>
<p>Certbot 网站： <a href="https://certbot.eff.org/" target="_blank" rel="external">https://certbot.eff.org/</a></p>
<p>Certbot Github： <a href="https://github.com/certbot/certbot" target="_blank" rel="external">https://github.com/certbot/certbot</a></p>
<p>测试环境： Ubuntu 14.04， python 2.7， nginx 1.4.6</p>
<h2 id="申请过程"><a href="#申请过程" class="headerlink" title="申请过程"></a>申请过程</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>首先要保证电脑中已经安装了git和nginx，并且能够正确运行。</p>
<p>安装certbot可以从github上面clone，或者直接从官方提供的下载地址进行下载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://dl.eff.org/certbot-auto</div><div class="line">chmod a+x certbot-auto</div></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>上面下载到的是一个自动安装脚本，运行这个脚本，会自动下载并安装所需要的各种依赖，下载完成之后，我们可以再次运行这个脚本进行证书的申请。但是，此时可以先创建一个配置文件，省去每次都要输入一长串命令的麻烦。Certbot的配置文件默认存放位置是/etc/letsencrypt/，默认的文件名是cli.ini，所以我们创建一个文件/etc/letencrypt/cli.ini，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rsa-key-size = 2048  //密钥长度，2048足够</div><div class="line"></div><div class="line">email = foo@example.com  //您的邮箱地址</div><div class="line"></div><div class="line">domains = example.com, www.example.com  //要申请证书的域名，多个域名用逗号分隔</div><div class="line"></div><div class="line">text = True  //是否使用文字交互，如果选false，将使用ncurses交互</div><div class="line"></div><div class="line">authenticator = webroot  //域名的验证方式</div><div class="line">webroot-path = /usr/share/nginx/html   //指定http服务器的root文件夹</div></pre></td></tr></table></figure>
<h3 id="3-申请"><a href="#3-申请" class="headerlink" title="3.申请"></a>3.申请</h3><p>只要执行 <code>certbot --config /etc/letsencrypt/cli.ini</code> 即可按照cli.ini中的配置内容进行申请证书的操作，申请成功之后，证书文件会存放在 <code>/etc/letsencrypt/archive/example.com</code> 文件夹中，同时，在 <code>/etc/letencrypt/live/example.com/</code> 中，会有相应的软连接，我们在使用的时候，可以直接利用软连接即可，避免续期之后的证书文件名变更导致nginx配置出错。</p>
<h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h3><p>在nginx的ssl配置时，按照如下配置即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssl_certificate /etc/letsencrypt/live/appinn.com/fullchain.pem;</div><div class="line">ssl_certificate_key /etc/letsencrypt/live/appinn.com/privkey.pem;</div></pre></td></tr></table></figure>
<h3 id="5-续期"><a href="#5-续期" class="headerlink" title="5.续期"></a>5.续期</h3><p>由于Let’s Encrypt 证书的有效期只有三个月，我们必须在到期之前对其进行续期。续期的操作是执行命令行 <code>certbot-auto renew</code>。我们可以创建定时任务，保证服务可以一直有效。</p>
<p>运行 <code>crontab -e</code> ，同时在下面加入一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">00 3 * * 0 certbot-auto renew</div><div class="line">01 3 * * 0 service nginx reload</div></pre></td></tr></table></figure>
<p>每周日凌晨三点钟运行续期服务，如果证书即将到期，即可自动对证书进行续期三个月，同时三点零一分会自动重新加载nginx，使得新申请的证书生效。</p>
<p>这样，HTTPS部分就已经配置完成并且不需要任何操作了，只要服务器一直在运行并且Let’s Encrypt 服务没有出意外，我们的HTTPS就会一直有效下去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s Encrypt 是一个免费的SSL证书机构，可以通过Certbot工具进行申请。&lt;/p&gt;
&lt;p&gt;Let’s Encrypt 网站： &lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="server" scheme="https://menglei.tk/categories/server/"/>
    
    
      <category term="HTTPS" scheme="https://menglei.tk/tags/HTTPS/"/>
    
      <category term="Nginx" scheme="https://menglei.tk/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>一些有用资源的备忘</title>
    <link href="https://menglei.tk/2016/10/18/memo/"/>
    <id>https://menglei.tk/2016/10/18/memo/</id>
    <published>2016-10-18T08:11:15.000Z</published>
    <updated>2016-10-24T08:59:49.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul>
<li>官方网站：<a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a></li>
<li>Github： <a href="https://github.com/nodejs/node" target="_blank" rel="external">https://github.com/nodejs/node</a></li>
</ul>
<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><ul>
<li>官方网站： <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></li>
<li>Taobao镜像： <a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></li>
<li>Mongodb Driver： <a href="https://www.npmjs.com/package/mongodb" target="_blank" rel="external">NPM</a> 、<a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="external">Github</a></li>
<li>Mongoose(Mongodb ORM)： <a href="http://mongoosejs.com/" target="_blank" rel="external">官网</a> 、 <a href="https://www.npmjs.com/package/mongoose" target="_blank" rel="external">NPM</a> 、 <a href="https://github.com/Automattic/mongoose" target="_blank" rel="external">Github</a></li>
<li>随机数生成： <a href="https://www.npmjs.com/package/hat" target="_blank" rel="external">NPM</a> 、 <a href="https://github.com/substack/node-hat" target="_blank" rel="external">Github</a></li>
<li>Node.js反向代理：<a href="https://www.npmjs.com/package/http-proxy" target="_blank" rel="external">NPM</a></li>
</ul>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul>
<li>W3School中文： <a href="http://www.w3school.com.cn/" target="_blank" rel="external">http://www.w3school.com.cn/</a></li>
<li>Can I Use： <a href="http://caniuse.com/" target="_blank" rel="external">http://caniuse.com/</a> 。 新特性浏览器支持查询。</li>
</ul>
<h2 id="API文档撰写"><a href="#API文档撰写" class="headerlink" title="API文档撰写"></a>API文档撰写</h2><ul>
<li>MkDocs： <a href="http://www.mkdocs.org/" target="_blank" rel="external">官网</a> 、 <a href="https://github.com/mkdocs/mkdocs" target="_blank" rel="external">Github</a></li>
<li>Slate： <a href="https://github.com/lord/slate" target="_blank" rel="external">Github</a></li>
<li>Readthedocs： <a href="https://readthedocs.org/" target="_blank" rel="external">官网</a></li>
<li>Gitbook： <a href="https://www.gitbook.com/" target="_blank" rel="external">官网</a></li>
<li>apidoc： <a href="http://apidocjs.com/" target="_blank" rel="external">官网</a> 、 <a href="https://github.com/apidoc/apidoc" target="_blank" rel="external">Github</a></li>
<li>mapbox： <a href="https://github.com/mapbox/docbox" target="_blank" rel="external">Github</a></li>
</ul>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>Hexo： <a href="https://hexo.io" target="_blank" rel="external">官网</a> 、<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">Github</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方网站：&lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_
    
    </summary>
    
      <category term="memo" scheme="https://menglei.tk/categories/memo/"/>
    
    
      <category term="备忘" scheme="https://menglei.tk/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="资源" scheme="https://menglei.tk/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://menglei.tk/2016/10/16/hello-world/"/>
    <id>https://menglei.tk/2016/10/16/hello-world/</id>
    <published>2016-10-16T08:11:15.000Z</published>
    <updated>2016-10-24T08:59:49.583Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
